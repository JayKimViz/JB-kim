using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Sabio.Models.Domain;
using Sabio.Models.Requests.InterviewCompany;
using Sabio.Services;
using Sabio.Web.Controllers;
using Sabio.Web.Models.Responses;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;

namespace Sabio.Web.Api.Controllers
{
    [Route("api/interviewCompanies")]
    [ApiController]
    public class InterviewCompanyAPIController : BaseApiController
    {
        private IInterviewCompanyService _service = null;
        public InterviewCompanyAPIController(IInterviewCompanyService service, ILogger<InterviewCompanyAPIController> logger) : base(logger)
        {
            _service = service;

        }

        [HttpGet]
        public ActionResult<ItemsResponse<InterviewCompany>> GetAll()
        {
            List<InterviewCompany> list = _service.GetTop();

            ItemsResponse<InterviewCompany> response = new ItemsResponse<InterviewCompany>();
            response.Items = list;

            if (list == null)
            {
                return NotFound404(response);
            }
            else
            {
                return Ok(response);
            }


        }

        [HttpGet("{id:int}")]
        public ActionResult<ItemResponse<InterviewCompany>> Get(int id)
        {

            int iCode = 200;
            BaseResponse response = null;

            try
            {
                InterviewCompany interview = _service.Get(id);

                if (interview == null)
                {
                    iCode = 404;
                    response = new ErrorResponse("Application Resource not found");
                
                }
                else
                {
                    response = new ItemResponse<InterviewCompany>() { Item = interview };
                }
            }
            catch (SqlException sqlEx)
            {
                iCode = 500;
                response = new ErrorResponse($"SqlException Error: { sqlEx.Message}");
            }
            catch (ArgumentException argEx)
            {
                iCode = 500;
                response = new ErrorResponse($"ArgumentException Error: { argEx.Message}");
            }

            catch (Exception ex)
            {
                iCode = 500;
                base.Logger.LogError(ex.ToString());
                response = new ErrorResponse($"Generic Error: { ex.Message}");
                
            }


            return StatusCode(iCode, response);
        }

        [HttpDelete("{id:int}")]
        public ActionResult<SuccessResponse> Delete(int id)
        {
            _service.Delete(id);

            SuccessResponse response = new SuccessResponse();


            return Ok(response);
        }

        [HttpPost]
        public ActionResult<ItemResponse<int>> Create(InterviewAddRequest model)
        {

            int id = _service.Add(model);

            ItemResponse<int> response = new ItemResponse<int>();

            response.Item = id;

            return Ok(response);
        }

        [HttpPut("{id:int}")]
        public ActionResult<ItemResponse<int>> Update(InterviewUpdateRequest model)
        {

            _service.Update(model);

            SuccessResponse response = new SuccessResponse();

            return Ok(response);
        }

    }
}
